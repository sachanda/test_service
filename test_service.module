<?php
/*
 * @file
 * 
 * 
 */


/*
 * Implements hook_menu
 */
 
function test_service_menu() {
  $items = array();
  $items['test-service/cancel-reservation'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_cancel_reservation',
    'access arguments' => array('access content'),
  );
  $items['test-service/make-reservation'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_make_reservation',
    'access arguments' => array('access content'),
  );

  $items['test-service/exchange-outbound'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_exchange_outbound',
    'access arguments' => array('access content'),
  );
  $items['test-service/exchange-inbound'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_exchange_inbound',
    'access arguments' => array('access content'),
  );
  $items['test-service/valiate-proposal'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_validate_proposal',
    'access arguments' => array('access content'),
  );
  $items['test-service/authorize-card'] = array(
    'title' => 'Testing services',
    'page callback' => 'test_service_authorize_card',
    'access arguments' => array('access content'),
  );
  return $items;
}

function test_service_cancel_reservation(){
  $service =  messagequeue_service_load('cancel_reservation');
  $result = $service->invoke(array('pnrReference' => 'ABCDEF'));
  print_r($result);exit;
  // Check status and set return value.
  if ($result['status']) {
    $return = $result['data'];
  }
  //return train_tickets_get_credit_card_fee();
}

function test_service_make_reservation(){
  $service =  messagequeue_service_load('make_reservation');
  //TODO: build $context->storage
  $result = $service->invoke($data);
  // Check status and set return value.
  if ($result['status']) {
    $return = $result['data'];
  }
  //return train_tickets_get_credit_card_fee();
}

function test_service_exchange_outbound() {
  $service =  messagequeue_service_load('get_exchange_proposal');
  $params = array(
  'data' => array(
    'pnrReference' => 'ABCDEF',
    'passengers' => array(
      array('firstName' => 'F1', 'lastName' => 'L1'),
      array('firstName' => 'F2', 'lastName' => 'L2'),
    ),
    'inboundDateTime' => time()+ 1000,
    'outboundDateTime' => time(),
    'depart' => time() + 10001,
    'arrival' => time() + 10000,
    'from' => 'GBSPX',
    'to' => 'FRPNO',
  ),
  'journey_type' => 'Outward',
  );
  $result = $service->invoke($params);
  print_r($result);exit;
}

function test_service_exchange_inbound() {
  $service =  messagequeue_service_load('get_exchange_proposal');
  $start = time() + 10001;
  $end = time() + 20000;
  
  $params = array(
    'data' => array(
      'pnrReference' => 'ABCDEF',
      'passengers' => array(
        array('firstName' => 'F1', 'lastName' => 'L1', 'passengerId' => 1),
        array('firstName' => 'F2', 'lastName' => 'L2', 'passengerId' => 2),
      ),
      'inboundDateTime' => $end,
      'outboundDateTime' => $start,
      'depart' => $end,
      'arrival' => $start,
      'from' => 'GBSPX',
      'to' => 'FRPNO',
    ),
    'journey_type' => 'Inward',
    'segment_data' => array(
      array(
        'endDate' => date('d/m/Y', $end),
        'endTime' => date('H:i', $end),
        'startDate' => date('d/m/Y', $start),
        'startTime' => date('H:i', $start),
        'segmentId' => 1,
        'trainNumber' => '9000',
        'carrierCode' => 1,
        'depart' => $end,
        'arrival' => $start,
        'originCode' => 'GBSPX',
        'destinationCode' => 'FRPNO',
        'marketingTrainNumber' => 5000,
        'marketingCarrierCode' => 1,
        'passengerFare' => array(
          array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>1),
          array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>2),
        )
      
      )
    ),
  );
  $result = $service->invoke($params);
  print_r($result);exit;
}

function test_service_validate_proposal() {
  $start = time() + 10001;
  $end = time() + 20000;
  $segment_details['segment_data'] = array(
      array(
        'endDate' => date('d/m/Y', $end),
        'endTime' => date('H:i', $end),
        'startDate' => date('d/m/Y', $start),
        'startTime' => date('H:i', $start),
        'segmentId' => 1,
        'trainNumber' => '9000',
        'carrierCode' => 1,
        'depart' => $end,
        'arrival' => $start,
        'originCode' => 'GBSPX',
        'destinationCode' => 'FRPNO',
        'marketingTrainNumber' => 5000,
        'marketingCarrierCode' => 1,
        'passengerFare' => array(
          array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>1),
          array('classOfService' => 'AF', 'fareCode'=>'BVSFLASB', 'passengerTypeCode'=>'PT01AD','passengerId'=>2),
        )
      )
    );
  $journey_details = array(
    array(
      'originCode' => 'GBSPX',
      'destinationCode' => 'FRPNO',
      'depart' => $end,
      'arrival' => $start,
      'journeyId' => 1,
    ),
  );
  $params = array(
  'pnrReference' => 'AAAAAA',
  'passengers' => array(
    array('firstName' => 'F1', 'lastName' => 'L1', 'passengerId' => 1),
    array('firstName' => 'F2', 'lastName' => 'L2', 'passengerId' => 2),
  ),
  'inboundDateTime' => time()+ 1000,
  'outboundDateTime' => time(),
  'depart' => time() + 10001,
  'arrival' => time() + 10000,
  'from' => 'GBSPX',
  'to' => 'FRPNO',
  'inbound' => $segment_details,
  'outbound' => $segment_details,
  'journeyDetails' => $journey_details,
  );
  $service =  messagequeue_service_load('validate_proposal');
  $result = $service->invoke($params);
  print_r($result);exit;
}

function test_service_authorize_card() {

  $params = array(
          // @todo purchase_desc needs to be figured out how it will be assembled.
          'purchase_desc' => 'Ticket purchase', //$payment['description'],
          'merchant_reference' => 'Merchant name',
          'currency' => 'EUR', //$payment['amount']['currency_code'],
          'amount' => '125', //commerce_currency_amount_to_decimal($payment['amount']['amount'], $payment['amount']['currency_code']),
          'card' => array(
            'street_address1' => 'Address 1',
            'street_address2' => NULL,
            'postcode' => NULL,
            'issue_number' => NULL,
            'start_date' => NULL,
            'expiry_date' => '12/12',
            'pan' => '1000070000000001',
            'cv2' => '123',
          ),
          'method' => 'auth',
        );
 
  $service =  messagequeue_service_load('authorize_card');
  $result = $service->invoke($params);
  print_r($result);exit;
}